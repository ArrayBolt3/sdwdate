#!/usr/bin/python3 -u

## Copyright (C) 2015 troubadour <trobador@riseup.net>
## Copyright (C) 2015 - 2020 ENCRYPTED SUPPORT LP <adrelanos@riseup.net>
## See the file COPYING for copying conditions.

## Usage:
## /usr/lib/sdwdate/url_to_unixtime socket_ip socket_port url remote_port verbosity

## Example:
## /usr/lib/sdwdate/url_to_unixtime 127.0.0.1 9050 check.torproject.org 80 true

import os, time, sys, socks
from dateutil.parser import parse

## Test
#import re

os.environ['TZ'] = 'UTC'
time.tzset()

def data_to_date_string_start_position(data):
    ## Test ########################
    #data = re.sub(b'Date', b'Rate', data)
    ################################
    date_string_start_position = data.find(b'Date:')

    if date_string_start_position == -1:
        ## not found, check if lowercase.
        date_string_start_position = data.find(b'date:')

    if date_string_start_position == -1:
        ## "Date:" not found.
        print('Parsing HTTP header date failed.')
        print('HTTP header data:\n{}'.format(data.decode()))
        sys.exit()

    date_string_start_position = date_string_start_position + 6
    return date_string_start_position

def data_to_http_time(data, date_string_start_position):
    http_time = ''
    ## max accepted string length.
    http_time = data[date_string_start_position:date_string_start_position + 29].strip()
    ## Test ###################
    #http_time = http_time[:28]
    ###########################
    http_time_string_length = len(http_time)

    ## min string length = max string length.
    if http_time_string_length < 29:
        print('HTTP header date string too short.')
        print('HTTP header date length: {}'.format(http_time_string_length))
        print('HTTP header data:\n{}'.format(data.decode()))
        print('HTTP header date value: "{}"'.format(http_time))
        sys.exit()

    ## Test - replace current hour with 30 ######
    #http_time = re.sub(b'11', b'30', http_time)
    #############################################
    return http_time

def unixtime_sanity_check(data, http_time, parsed_unixtime):
    try:
        unixtime_digit = int(parsed_unixtime)

    except ValueError as e:
        print('parsed_unixtime conversion failed!')
        print('data: {}'.format(data.decode()))
        print('http_time: {}'.format(http_time.decode()))
        print('parsed_unixtime: {}'.format(parsed_unixtime))
        print('parsed_unixtime not numeric!')
        sys.exit()

    unixtime_string_length_is = len(parsed_unixtime)
    unixtime_string_length_max = 10

    if unixtime_string_length_is > unixtime_string_length_max:
        print('parsed_unixtime conversion failed!')
        print('data: {}'.format(data.decode()))
        print('http_time: {}'.format(http_time.decode()))
        print('parsed_unixtime: {}'.format(parsed_unixtime))
        print('unixtime_string_length_is: {}'.format(unixtime_string_length_is))
        print('unixtime_string_length_max: {}'.format(unixtime_string_length_max))
        print('parsed_unixtime has excessive string length!')
        sys.exit()

    #print >> sys.stderr, parsed_unixtime
    return parsed_unixtime

def request_data_from_remote_server(socket_ip, socket_port, url, remote_port):
    s = socks.socksocket()
    s.setproxy(socks.PROXY_TYPE_SOCKS5, socket_ip, socket_port)

    try:
        s.connect((url, remote_port))

    except Exception as e:
        print('connect error: {}'.format(e))
        sys.exit()

    s.send('HEAD / HTTP/1.0\r\n\r\n'.encode())

    data = b''
    buf = s.recv(1024)
    while len(buf):
        data += buf
        buf = s.recv(1024)
    s.close()

    return data

def http_time_to_parsed_unixtime(data, http_time):
    try:
        ## Thanks to:
        ## eumiro
        ## http://stackoverflow.com/a/3894047/2605155
        parsed_unixtime = parse(http_time).strftime('%s')

    except ValueError as e:
        print('Parsing http_time from server failed!')
        print('HTTP header data:\n{}'.format(data.decode()))
        print('http_time: {}'.format(http_time.decode()))
        print('dateutil ValueError: {}'.format(e))
        sys.exit()

    ## Test ##################################
    #parsed_unixtime = '%sA' % parsed_unixtime
    ##########################################
    ## Test ##################################
    #parsed_unixtime = '%s1' % parsed_unixtime
    ##########################################
    return(parsed_unixtime)

def parse_command_line_parameters():
    try:
        socket_ip = sys.argv[1]
        socket_port = int(sys.argv[2])
        url = sys.argv[3]
        remote_port = int(sys.argv[4])
        verbosity = sys.argv[5]

    except (IndexError) as e:
        print("Parsing command line parameter failed. | e: {}".format(e))
        sys.exit()

    return(socket_ip, socket_port, url, remote_port, verbosity)

def output_unixtime(data, http_time, parsed_unixtime, unixtime, verbosity):
    if verbosity == "true":
        print('data: {}'.format(data.decode()))
        print('http_time: {}'.format(http_time.decode()))
        print('parsed_unixtime: {}'.format(parsed_unixtime))
    print('{}'.format(unixtime))

def main():
   socket_ip, socket_port, url, remote_port, verbosity = parse_command_line_parameters()
   data = request_data_from_remote_server(socket_ip, socket_port, url, remote_port)
   date_string_start_position = data_to_date_string_start_position(data)
   http_time = data_to_http_time(data, date_string_start_position)
   parsed_unixtime = http_time_to_parsed_unixtime(data, http_time)
   unixtime = unixtime_sanity_check(data, http_time, parsed_unixtime)
   output_unixtime(data, http_time, parsed_unixtime, unixtime, verbosity)

main()
